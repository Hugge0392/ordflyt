Lösningen: ha två separata state-objekt – ett för normalt läge och ett för fokusläge – och låt reglagen i UI:t redigera “det aktiva” state:et beroende på om fokusläge är på eller av. Spara dem separat i localStorage så att de minns var för sig.

Nedan får du en minimal, icke-invasiv patch (du kan klistra in i filen där respektive block finns). Jag använder begreppen normalSettings och focusSettings, samt en hjälpare activeSettings/setActiveSettings som byter beroende på readingFocusMode.

1) Lägg till två separata state + laddning/sparande
// ✅ ERSÄTT din nuvarande accessibilitySettings med detta

// Hjälp-typ för återanvändbara värden
type ReaderSettings = {
  fontSize: number;
  lineHeight: number;
  backgroundColor: "black-on-white" | "light-gray-on-gray" | "white-on-black" | "black-on-light-yellow" | "black-on-light-blue" | "light-yellow-on-blue" | "black-on-light-red";
  fontFamily: "standard" | "dyslexia-friendly";
};

// Normal-läge (tidigare accessibilitySettings)
const [normalSettings, setNormalSettings] = useState<ReaderSettings>(() => {
  try {
    const saved = localStorage.getItem("reading-normal-settings");
    return saved ? JSON.parse(saved) : { fontSize: 30, lineHeight: 1.5, backgroundColor: "black-on-white", fontFamily: "standard" };
  } catch {
    return { fontSize: 30, lineHeight: 1.5, backgroundColor: "black-on-white", fontFamily: "standard" };
  }
});

// Fokus-läge – egna defaults
const [focusSettings, setFocusSettings] = useState<ReaderSettings>(() => {
  try {
    const saved = localStorage.getItem("reading-focus-settings");
    return saved ? JSON.parse(saved) : { fontSize: 34, lineHeight: 1.6, backgroundColor: "white-on-black", fontFamily: "dyslexia-friendly" };
  } catch {
    return { fontSize: 34, lineHeight: 1.6, backgroundColor: "white-on-black", fontFamily: "dyslexia-friendly" };
  }
});

// Välj aktivt settings-objekt utifrån läge
const activeSettings = readingFocusMode ? focusSettings : normalSettings;
const setActiveSettings = readingFocusMode ? setFocusSettings : setNormalSettings;

// Spara var för sig
useEffect(() => {
  try { localStorage.setItem("reading-normal-settings", JSON.stringify(normalSettings)); } catch {}
}, [normalSettings]);

useEffect(() => {
  try { localStorage.setItem("reading-focus-settings", JSON.stringify(focusSettings)); } catch {}
}, [focusSettings]);

2) Uppdatera din “CSS-variabler”-effekt att skriva båda uppsättningarna

Din befintliga useEffect som sätter --accessibility-* skriver just nu bara en uppsättning. Vi behåller den, men gör om den så den alltid uppdaterar två uppsättningar variabler: --normal-* och --focus-*. Sedan läser vi från rätt uppsättning i renderingen.

// ✅ ERSÄTT din nuvarande useEffect som sätter CSS-variabler med denna
useEffect(() => {
  const bgColorMap = {
    "black-on-white": { bg: "#FFFFFF", text: "#000000" },
    "light-gray-on-gray": { bg: "#595959", text: "#D9D9D9" },
    "white-on-black": { bg: "#000000", text: "#FFFFFF" },
    "black-on-light-yellow": { bg: "#FFFFCC", text: "#000000" },
    "black-on-light-blue": { bg: "#CCFFFF", text: "#000000" },
    "light-yellow-on-blue": { bg: "#003399", text: "#FFFFCC" },
    "black-on-light-red": { bg: "#FFCCCC", text: "#000000" },
  } as const;

  const root = document.documentElement;

  // Helper för att sätta en hel profil
  const applyProfile = (prefix: "--normal", s: ReaderSettings) => {
    const colors = bgColorMap[s.backgroundColor];
    root.style.setProperty(`${prefix}-bg-color`, colors.bg);
    root.style.setProperty(`${prefix}-text-color`, colors.text);

    // failsafe: invertera om lika
    const bg = colors.bg.toLowerCase();
    const tx = colors.text.toLowerCase();
    root.style.setProperty(
      `${prefix}-text-color`,
      bg === tx ? (bg === "#000000" ? "#ffffff" : "#000000") : colors.text
    );

    root.style.setProperty(`${prefix}-font-size`, `${s.fontSize}px`);
    root.style.setProperty(`${prefix}-line-height`, s.lineHeight.toString());

    const fontFamily =
      s.fontFamily === "dyslexia-friendly"
        ? '"OpenDyslexic", "Comic Sans MS", cursive, sans-serif'
        : "system-ui, -apple-system, sans-serif";
    root.style.setProperty(`${prefix}-font-family`, fontFamily);
  };

  applyProfile("--normal", normalSettings);
  applyProfile("--focus", focusSettings);
}, [normalSettings, focusSettings]);


Obs: Vi tar inte bort dina gamla variabler i resten av koden ännu – nedan pekar vi om användningen till --normal-* eller --focus-* beroende på läge.

3) Gör mätningar beroende av aktiva settings
// ✅ Uppdatera dependencies i din DOM measurement effect
}, [
  lesson,
  currentPage,
  activeSettings.fontSize,
  activeSettings.lineHeight,
  activeSettings.fontFamily,
]);

4) Använd rätt variabler i renderingen (bakgrunder/typsnitt/storlek)

Byt ut ställen där du tidigare läste accessibilitySettings/--accessibility-* så att:

i normalläge läser du --normal-*

i fokusläge läser du --focus-*

Här är de viktiga ställena:

a) Yttre Card och content-behållare
<Card
  // ...
  style={{
    backgroundColor: readingFocusMode ? "var(--focus-bg-color)" : "var(--normal-bg-color)",
    color: readingFocusMode ? "var(--focus-text-color)" : "var(--normal-text-color)",
    borderColor: readingFocusMode ? "transparent" : "var(--normal-text-color)",
    // ...
  } as React.CSSProperties}
>


I content-div (den med ref={contentRef}):

<div
  ref={contentRef}
  // ...
  style={{
    fontSize: "16px",
    whiteSpace: "normal",
    wordWrap: "break-word",
    backgroundColor: readingFocusMode ? "var(--focus-bg-color)" : "var(--normal-bg-color)",
    color: readingFocusMode ? "var(--focus-text-color)" : "var(--normal-text-color)",
    display: "flow-root",
    width: readingFocusMode ? "100%" : undefined,
    maxWidth: readingFocusMode ? "none" : undefined,
    fontFamily: readingFocusMode ? "var(--focus-font-family)" : "var(--normal-font-family)",
  }}
>
  <style>{`
    .reading-content {
      background-color: ${readingFocusMode ? "var(--focus-bg-color)" : "var(--normal-bg-color)"} !important;
      color: ${readingFocusMode ? "var(--focus-text-color)" : "var(--normal-text-color)"} !important;
    }
    .reading-content * {
      color: ${readingFocusMode ? "var(--focus-text-color)" : "var(--normal-text-color)"} !important;
    }
  `}</style>

b) Själva texten (ref={textRef})
<div
  ref={textRef}
  data-reading-text=""
  style={{
    fontSize: readingFocusMode ? "var(--focus-font-size)" : "var(--normal-font-size)",
    lineHeight: readingFocusMode ? "var(--focus-line-height)" : "var(--normal-line-height)",
    position: "relative",
    zIndex: 10,
    mixBlendMode: "normal",
    paddingTop: 1,
    pointerEvents: "auto",
    transform: "translateZ(0)"
  }}
  dangerouslySetInnerHTML={{ __html: processContentWithDefinitions(
    pages[currentPage] || "",
    lesson.wordDefinitions,
  ) }}
/>

5) Låt “Inställningar”-popover styra aktivt settings

Byt ut alla accessibilitySettings-anrop i popovern till activeSettings/setActiveSettings. Det gör att när du står i fokusläge redigerar du fokus-inställningarna; i normalläge redigerar du normal-inställningarna – utan att de påverkar varandra.

<PopoverContent className="w-80 p-4" align="end">
  <div className="space-y-4">
    <div>
      <Label className="text-sm font-medium">Textstorlek</Label>
      <Slider
        value={[activeSettings.fontSize]}
        onValueChange={(value) =>
          setActiveSettings(prev => ({ ...prev, fontSize: value[0] }))
        }
        min={16}
        max={60}
        step={2}
        className="mt-2"
      />
      <div className="text-xs text-muted-foreground mt-1">
        {activeSettings.fontSize}px
      </div>
    </div>

    <div>
      <Label className="text-sm font-medium">Radavstånd</Label>
      <Slider
        value={[activeSettings.lineHeight]}
        onValueChange={(value) =>
          setActiveSettings(prev => ({ ...prev, lineHeight: value[0] }))
        }
        min={1.0}
        max={3.0}
        step={0.1}
        className="mt-2"
      />
      <div className="text-xs text-muted-foreground mt-1">
        {activeSettings.lineHeight.toFixed(1)}
      </div>
    </div>

    <div>
      <Label className="text-sm font-medium">Bakgrundsfärg</Label>
      <Select
        value={activeSettings.backgroundColor}
        onValueChange={(value) =>
          setActiveSettings(prev => ({ ...prev, backgroundColor: value as ReaderSettings["backgroundColor"] }))
        }
      >
        <SelectTrigger className="mt-2"><SelectValue /></SelectTrigger>
        <SelectContent>
          <SelectItem value="black-on-white">Svart på vitt</SelectItem>
          <SelectItem value="light-gray-on-gray">Ljusgrå på grå</SelectItem>
          <SelectItem value="white-on-black">Vit på svart</SelectItem>
          <SelectItem value="black-on-light-yellow">Svart på ljusgul</SelectItem>
          <SelectItem value="black-on-light-blue">Svart på ljusblå</SelectItem>
          <SelectItem value="light-yellow-on-blue">Ljusgul på blå</SelectItem>
          <SelectItem value="black-on-light-red">Svart på ljusröd</SelectItem>
        </SelectContent>
      </Select>
    </div>

    <div>
      <Label className="text-sm font-medium">Teckensnitt</Label>
      <Select
        value={activeSettings.fontFamily}
        onValueChange={(value) =>
          setActiveSettings(prev => ({ ...prev, fontFamily: value as ReaderSettings["fontFamily"] }))
        }
      >
        <SelectTrigger className="mt-2"><SelectValue /></SelectTrigger>
        <SelectContent>
          <SelectItem value="standard">Standard</SelectItem>
          <SelectItem value="dyslexia-friendly">Dyslexi-vänligt</SelectItem>
        </SelectContent>
      </Select>
    </div>

    {/* Läsfokus (samma som tidigare) */}
    {/* ... */}
  </div>
</PopoverContent>


Vill du göra det ännu tydligare för användaren kan du lägga till en liten “flagg” överst i popovern:

<Badge variant="secondary">
  {readingFocusMode ? "Redigerar: Fokusläge" : "Redigerar: Normalläge"}
</Badge>

6) Små följdändringar

Där du tidigare använde accessibilitySettings i logik (t.ex. dependencies, font val i inline styles), byt till activeSettings eller till rätt profil (normalSettings / focusSettings) beroende på kontext.

Din gamla getShowFocusQuestionsButton() läser accessibility-settings i localStorage – vill du behålla den, låt den vara kvar. Om den ska vara läges-specifik kan du läsa från de nya nycklarna.

Varför det här fungerar

Separata states → ingen “läckage” mellan lägen.

Separata CSS-variabler (--normal-* och --focus-*) → rendering pekar alltid på rätt profil.

Popover editerar aktiv profil → användaren får precis det de förväntar sig (ändringar i fokusläge påverkar endast fokusläge).