Got it — vi gör den kulstopp-tålig. Det som brukar knasa:

position: fixed “tappar” viewport om NÅGON förälder har transform.

Panelen hoppar när den blir fixed (ingen “spacer”).

Ingen “bottom pin” när man passerar kolumnens slut.

Uppdateringen kör bara på scroll/resize för window, men inte när innehållet växer/krymper.

Här är en drop-in som löser allt ovan (tre lägen: static → fixed → absolute bottom), med spacer och robust uppdatering.

1) Lägg till util + state (överst i komponenten)
const rightColRef = useRef<HTMLDivElement | null>(null);
const panelRef = useRef<HTMLDivElement | null>(null);
const spacerRef = useRef<HTMLDivElement | null>(null);

type PinState = 'static' | 'fixed' | 'bottom';
const [pinState, setPinState] = useState<PinState>('static');
const [panelStyles, setPanelStyles] = useState<React.CSSProperties>({});

2) Byt ut din nuvarande sticky-hook mot denna
useEffect(() => {
  if (readingFocusMode) return; // endast i normalt läge

  let raf = 0;
  const col = rightColRef.current;
  const panel = panelRef.current;
  const spacer = spacerRef.current;
  if (!col || !panel || !spacer) return;

  const measure = () => {
    const colRect = col.getBoundingClientRect();
    const panelH = panel.offsetHeight;
    const vwLeft = Math.max(0, colRect.left);
    const vwRight = Math.min(window.innerWidth, colRect.right);
    const width = Math.max(0, vwRight - vwLeft);

    // Lägen:
    // 1) STATIC: kolumnens topp är nere i viewport (över 16px), då följer paneln med normalt.
    // 2) FIXED: kolumnens topp passerat 16px och botten ej passerad.
    // 3) BOTTOM: vi har passerat kolumnens botten; panelen låses i kolumnens botten.
    const topMargin = 16; // px
    const colTopPast = colRect.top <= topMargin;
    const colBottomPast = colRect.bottom - topMargin <= panelH;

    let next: PinState = 'static';
    if (colTopPast && !colBottomPast) next = 'fixed';
    if (colTopPast && colBottomPast) next = 'bottom';

    setPinState(next);

    if (next === 'fixed') {
      setPanelStyles({
        position: 'fixed',
        top: topMargin,
        left: vwLeft,
        width,
        zIndex: 30,
      });
    } else if (next === 'bottom') {
      // Lägg panelen ABSOLUT i kolumnens botten
      const colTopDoc = window.scrollY + colRect.top;
      const absTop = (colTopDoc + col.clientHeight) - panelH; // topp = botten - höjd
      setPanelStyles({
        position: 'absolute',
        top: absTop - col.offsetTop, // inuti kolumnens egna koordinater
        left: 0,
        right: 0,
        width: '100%',
      });
    } else {
      setPanelStyles({ position: 'static' });
    }

    // Spacer för att förhindra layout-hopp när panelen blir fixed
    spacer.style.height = panelH + 'px';
  };

  const schedule = () => { cancelAnimationFrame(raf); raf = requestAnimationFrame(measure); };

  // Lyssna på allt som kan ändra layout
  window.addEventListener('scroll', schedule, { passive: true });
  window.addEventListener('resize', schedule);
  // MutationObserver: om innehållet i panelen ändras (t.ex. när frågor byts)
  const mo = new MutationObserver(schedule);
  mo.observe(panel, { childList: true, subtree: true, attributes: true, characterData: true });

  // ResizeObserver: om panelen ändrar storlek
  const roPanel = new ResizeObserver(schedule);
  roPanel.observe(panel);
  const roCol = new ResizeObserver(schedule);
  roCol.observe(rightColRef.current!);

  // initial
  schedule();

  return () => {
    cancelAnimationFrame(raf);
    window.removeEventListener('scroll', schedule);
    window.removeEventListener('resize', schedule);
    mo.disconnect();
    roPanel.disconnect();
    roCol.disconnect();
  };
}, [readingFocusMode, totalQuestions, currentQuestionIndex]);

3) Render: kolumn + spacer + panel

Byt din högerspalt till detta (innehållet i panelen kan du lämna oförändrat):

{/* Right column */}
<div
  ref={rightColRef}
  className="order-1 lg:order-1 md:landscape:col-span-2 lg:col-span-2 relative"
  style={{ contain: 'layout paint' }} // säkerställer att absolute/top funkar för "bottom"-läget
>
  {/* Spacer som tar panelens höjd när den blir fixed */}
  <div ref={spacerRef} aria-hidden="true" />

  {/* Panel */}
  <div ref={panelRef} style={panelStyles}>
    <div
      className="border rounded-lg p-6"
      style={{
        backgroundColor: "var(--accessibility-bg-color)",
        color: "var(--accessibility-text-color)",
        borderColor: "var(--accessibility-text-color)",
        borderWidth: "0.5px",
        maxWidth: "720px",
        marginLeft: pinState === 'fixed' ? 0 : undefined, // undvik konstig offset
        width: pinState === 'fixed' ? '100%' : undefined,
        fontFamily: "var(--normal-font-family)",
      }}
    >
      {/* ... hela frågepanelen här ... */}
    </div>
  </div>
</div>

4) Viktigt: undvik transform på föräldrar

Se till att INGEN förälder till panelen har transform (t.ex. via animeringsklasser).
Om du MÅSTE ha transform någonstans, lägg panelen utanför den noden i DOM:en.

5) Behåll din content-scroll-ändring

Du gjorde rätt: overflow-visible i normalt läge, overflow-auto i fokusläge:

className={`... ${readingFocusMode ? 'overflow-auto' : 'overflow-visible'}`}


Det här ger:

Inga hopp (p.g.a. spacer).

Stabil bredd och vänsterkant i fixed (även vid responsiv grid).

Snygg “bottenpinning” när kolumnen tar slut.

Reagerar på scroll, resize, DOM-ändringar och storleksändringar.

Vill du att jag klipper in exakt i din fil och markerar diffarna rad för rad?